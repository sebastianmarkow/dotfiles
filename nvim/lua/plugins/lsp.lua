local icons = require('config.icons')

return {
  {
    'mason-org/mason-lspconfig.nvim',
    dependencies = {
      {
        { 'mason-org/mason.nvim', opts = {} },
        'neovim/nvim-lspconfig',
        -- build = function()
        --   local lsp_servers = {
        --     'basedpyright',
        --     'gopls',
        --     'lua_ls',
        --     'rust_analyzer',
        --     'yamlls',
        --   }
        --   local tools = {
        --     'debugpy',
        --     'ruff',
        --     'yamllint',
        --   }
        --
        --   local mason_registry = require('mason-registry')
        --   local function install_ensured()
        --     for _, tool in ipairs(tools) do
        --       local p = mason_registry.get_package(tool)
        --       if not p:is_installed() then p:install() end
        --     end
        --   end
        --   mason_registry.refresh()
        --   install_ensured()
        --   require('mason-lspconfig').setup({
        --     ensure_installed = lsp_servers,
        --   })
        -- end,
      },
      -- 'hrsh7th/nvim-cmp',
      -- 'hrsh7th/cmp-nvim-lsp',
    },
    event = { 'BufReadPre', 'BufNewFile' },
    cmd = 'Mason',
    opts = {},
    -- opts = {
    --   diagnostics = {
    --     underline = true,
    --     update_in_insert = false,
    --     virtual_lines = {
    --       current_line = true,
    --     },
    --     signs = {
    --       text = {
    --         [vim.diagnostic.severity.ERROR] = icons.diagnostics.error,
    --         [vim.diagnostic.severity.WARN] = icons.diagnostics.warn,
    --         [vim.diagnostic.severity.INFO] = icons.diagnostics.info,
    --         [vim.diagnostic.severity.HINT] = icons.diagnostics.hint,
    --       },
    --     },
    --     severity_sort = true,
    --     float = {
    --       style = 'minimal',
    --       border = 'rounded',
    --       source = 'always',
    --       header = '',
    --       prefix = '',
    --     },
    --   },
    --   servers = {
    --     yamlls = {
    --       filetypes = { 'yaml' },
    --       settings = {
    --         schemaStore = {
    --           enable = true,
    --           url = 'https://www.schemastore.org/api/json/catalog.json',
    --         },
    --         schemas = {
    --           kubernetes = '*.yaml',
    --           ['http://json.schemastore.org/github-workflow'] = '.github/workflows/*',
    --           ['http://json.schemastore.org/github-action'] = '.github/action.{yml,yaml}',
    --           ['http://json.schemastore.org/prettierrc'] = '.prettierrc.{yml,yaml}',
    --           ['http://json.schemastore.org/kustomization'] = 'kustomization.{yml,yaml}',
    --           ['http://json.schemastore.org/chart'] = 'Chart.{yml,yaml}',
    --           ['https://json.schemastore.org/dependabot-v2'] = '.github/dependabot.{yml,yaml}',
    --           ['https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.1/schema.json'] = '*api*.{yml,yaml}',
    --           ['https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json'] = '*docker-compose*.{yml,yaml}',
    --           ['https://raw.githubusercontent.com/argoproj/argo-workflows/master/api/jsonschema/schema.json'] = '*flow*.{yml,yaml}',
    --         },
    --         format = { enabled = false },
    --         -- enabling this conflicts between Kubernetes resources and kustomization.yaml and Helmreleases
    --         validate = false,
    --         completion = true,
    --         hover = true,
    --       },
    --     },
    --     gopls = {
    --       filetypes = { 'go' },
    --       settings = {
    --         gofumpt = true,
    --         codelenses = {
    --           gc_details = false,
    --           generate = true,
    --           regenerate_cgo = true,
    --           run_govulncheck = true,
    --           test = true,
    --           tidy = true,
    --           upgrade_dependency = true,
    --           vendor = true,
    --         },
    --         hints = {
    --           assignVariableTypes = true,
    --           compositeLiteralFields = true,
    --           compositeLiteralTypes = true,
    --           constantValues = true,
    --           functionTypeParameters = true,
    --           parameterNames = true,
    --           rangeVariableTypes = true,
    --         },
    --         analyses = {
    --           fieldalignment = true,
    --           nilness = true,
    --           unusedparams = true,
    --           unusedwrite = true,
    --           useany = true,
    --         },
    --         usePlaceholders = true,
    --         completeUnimported = true,
    --         staticcheck = true,
    --         directoryFilters = { '-.git' },
    --         semanticTokens = true,
    --       },
    --     },
    --     lua_ls = {
    --       filetypes = { 'lua' },
    --       settings = {
    --         Lua = {
    --           telemetry = { enable = false },
    --           diagnostics = { globals = { 'vim' } },
    --           hint = { enable = true },
    --           workspace = {
    --             library = {
    --               [vim.fn.expand('$VIMRUNTIME/lua')] = true,
    --               [vim.fn.stdpath('config') .. '/lua'] = true,
    --             },
    --           },
    --         },
    --       },
    --     },
    --     basedpyright = {
    --       filetypes = { 'python' },
    --       settings = {
    --         basedpyright = {
    --           analysis = {
    --             typeCheckingMode = 'off',
    --             autoImportCompletions = true,
    --             autoSearchPaths = false,
    --             diagnosticMode = 'workspace',
    --             useLibraryCodeForTypes = true,
    --             diagnosticSeverityOverrides = {
    --               reportMissingTypeStubs = false,
    --               reportUnknownVariableType = false,
    --             },
    --           },
    --         },
    --       },
    --     },
    --     rust_analyzer = { filetypes = { 'rust' }, settings = {} },
    --   },
    -- },
    -- config = function(_, opts)
    --   local function on_attach(client, bufnr)
    --     local keymap = vim.api.nvim_buf_set_keymap
    --     local args = { noremap = true, silent = true }
    --
    --     keymap(bufnr, 'n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', args)
    --     keymap(bufnr, 'n', 'gd', '<cmd>lua vim.lsp.buf.declaration()<CR>', args)
    --     keymap(bufnr, 'n', 'gD', '<cmd>lua vim.lsp.buf.definition()<CR>', args)
    --     keymap(bufnr, 'n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', args)
    --
    --     require('nvim-navic').attach(client, bufnr)
    --   end
    --
    --   local capabilities = require('cmp_nvim_lsp').default_capabilities()
    --
    --   require('mason').setup()
    --   require('mason-lspconfig').setup({
    --     automatic_enable = {
    --       'basedpyright',
    --     },
    --   })
    --   vim.lsp.config('basedpyright', {
    --     settings = {
    --       basedpyright = {
    --         analysis = {
    --           typeCheckingMode = 'standard',
    --           autoImportCompletions = true,
    --           autoSearchPaths = false,
    --           diagnosticMode = 'openFilesOnly',
    --           useLibraryCodeForTypes = true,
    --           diagnosticSeverityOverrides = {
    --             reportMissingTypeStubs = false,
    --             reportUnknownVariableType = false,
    --             reportUntypedFunctionDecorator = true,
    --             reportUntypedClassDecorator = true,
    --           },
    --         },
    --       },
    --     },
    --   })
    --   vim.diagnostic.config(opts.diagnostics)
    -- end,
  },
}
